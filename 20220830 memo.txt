Maven 프로젝트 >> 자바로 만드는 어떤 것도 메이븐으로 개발 가능. 범위가 크다. 메이븐 외에도  그레이들Gradle 이 있다.

자바 앱, 다이나믹 웹프로젝트 모두 가능! 스프링도!

메이븐 특징 : 

Maven 프로젝트를 만들기 위해서는 메이븐을 다운로드해서 설치해야 가능.
maven.apache.org 여기서 다운로드해서 설치
설치가 완료됬다면 cmd 창에서 mvn 검색시 뭔가 뜰 것이야.
mvn -version 입력시 버전 확인도 가능~

pom.xml 문서//
pom에는 프로젝트의 설정(주로 의존 라이브러리의 목록)이 들어있다.
필요한 의존 라이브러리가 있다면, pom.xml에 dependency 설정을 추가하는것 만으로 자동 다운로드 하고 사용할 준비가 된다.
dependeny 를 때려박으면 jar 파일이 생성되는 것을 볼 수 있음.

환경변수에다 경로 추가도 잊지 말기. 이거 해야 커맨드에서 mvn 입력해야 실행 파일을 찾을 수 있다.
아무데다 때려박는 건 아니고,
<dependencies>
	<dependency> <!-- 여기에 -->
	...
	</dependency>
</dependencies>
>> dependencies의 자식요소로만 붙여넣기 가능.

자바에서 설치된 경로측 bin 폴더 사이트에서 등록하는 것처럼 maven 도 그렇게.

pom.xml에서 dependency 설정한 문자열은 맞는 걸 어케 가져오는 것일까?
>> mvnrepository.com 여기서 찾는다.
검색해서 보면 .jar 파일(자바 추가 라이브러리) 다운로드 할 수 있음.
dependency 에 추가하는 것 만으로 사용가능한 게 진짜 편하다.
>> .m2 폴더 안에 자동으로 다운로드된다.(다운로드 되는 폴더를 잘 확인해둘 것)


web.xml의 appServlet은 HttpServlet을 대신하는 느낌이다.
DispatcherServlet 을 설정하는 것으로부터 시작한다. 이게 없으면 스프링은 동작안함


	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
<url-pattern>/</url-pattern> 에서는 url pattern 을 설정한다.


DispatcherServlet은 미리 만들어진 서블릿이다 .만일 우리가 해당 서블릿의 동작을 변경하고 싶다면?

미리 만들어진 Apache Tomcat의 설정을 web.xml으로 변경할 수 있듯이
DispatcherServlet의 동작도 xml 문서로 설정할 수 있다.
그 문서는...바로바로...servlet-context.xml 문서!~@!!
servlet-context.xml 에서는 스프링 프레임워크가 동작하는데 있어서 필요한 설정을 하는 곳이다.
<init-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
</init-param>
 
에서 /WEB-INF/spring/appServlet/servlet-context.xml 을 찾아가보자.
Beans(객체)에 대한 설정들 있음.

응답은 컨트롤러에게 지시한지만 그건 또 jsp 페이지 포워드 이동으로 응답시킴.

톰캣 서버의 설정은 web.xml, 디스패쳐서블렛의 설정은 servlet-xontext.sml 에 있다.
뭔가 사용자가 맘에 드는 설정으로 바꾸고 싶다면 이 파일 을 수정하면 된다. 세팅용 문서라고 보심 됩니다.

MVC에서 M은 Model, V는 View, C는 Controller를 의미한다.
스프림 프레임 워크에서 Model은 data이고 View는 /WEB-INF/view 폴더 안에 있는 JSP page이고
Controller는 HomeController, Acontroller 등등...@Controller 어노테이션으로 만든 객체를 의미한다.

---

[ Spring FrameWork ] 
그래서 이건 왜 쓰는건데? 왜 편한 건데?
다이나믹 웹 프로젝트와 비교하면 오히려 코딩량은 증가한 모습인데? >> 개발자는 불편해졌다.
개발 단계에서는 까다롭지만, 한번 만들어 놓으면 유지보수가 용이하다
왜 용이한데? 객체들간의 의존관계가 느슨해지기 때문 
어떻게 의존관계를 느슨하게 한건데? 
1. 필요한 핵심 의존 객체의 생성과 관리를 프레임워크에게 맡긴다. 
( ex)DAO를 new 하지 않는다. 프레임워크에서 받아서 쓴다.)
2. interface type을 적극 활용한다. <<< 앞으로 인터페이스 만들 일이 많아질 것.


---
Step01_Basic
몇가지 설정을 바꿔보자.

공유문서에 있는 설정대로 바꾼 다음
Maven - update 하기.

--------------------------
WEB-INF 폴더는 직접 요청할 수 없다!  

