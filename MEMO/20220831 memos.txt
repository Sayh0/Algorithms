MemberController
	/*
	 * @ 어노테이션을 많이 사용할 예정인데,
	 * 어노테이션에 대한 이해가 필요해.
	 * 스프링 프레임워크는 골뱅이 천지다. 이놈으로 왠만한 건 다 해.
	 * 우리가 알고 있는 상식은 상속이나 인터페이스로 하는건데, 골뱅이는 대체 뭐지?
	 * 
	 * -어노테이션 : 어노테이션이 붙은 클래스는 그 모양 그대로 사용되지 않고
	 *  런타임시에 변형되어서 사용된다.
	 *  어떤 변형? 특정 클래스를 상속받기도 하고, 특정 인터페이스를 구형하기도 하고
	 *  없던 메소드가 만들어지기도 하고, 없던 필드가 추가되기도 하는 등등의 자동화 작업...
	 * 
	 */
---
SendrController

주소창에 직접 요청 경로를 입력하거나
링크를 클릭하면 무조건 get 방식 요청임.(default는 get.)

post 방식 요청을 하려면 어떻게 할래? method=post 처럼 지정.
>> 요청 경로는 같아도 요청 방식에 따라서 응답되는 컨텐츠를 다르게 응답할 수 있다!
@RequestMapping(value = "/add"... 에서 method=RequestMethod.GET <<< 로 요청방법도 구분 가능

---
마이바티스 = SQL 할 때 필요한 귀찮은 일들을 대신 해주는 좋은 것

Dependency Injection 줄여서 DI. 스프링의 핵심적 기능
필요한 순간에 기능을 사용할 수 있게 해줌.
왜 이렇게 하냐고? 의존관계 느슨하게 하기 위해.
DAO 도 인터페이스를 활용해서 만든다


MyBatis 코드 처음부터 복기하기.



todo 
1. 패키지 미리 만들기

.todo.dto
.todo.dao
.todo.controller

2. 클래스, 인터페이스 만들기
TodoDto
TodoDao, TodoDaoImpl
TodoController

3. TodoMapper.xml
Configuration.xml 문서에 TodoMapper.xml 사용할 준비하기 

4. /views/todo/폴더 만들고 해당 폴더 안에
list.jsp
insertform.jsp
insert.jsp
delete.jsp
updateform.jsp
update.jsp

5. 처리할 요청
/todo/list.do

/todo/insertform.do
/todo/insert.do

/todo/updateform.do
/todo/update.do

/todo/deleteform.do
/todo/delete.do

