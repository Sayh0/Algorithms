web-inf 페이지는 직접 요청 못함  > 404 뜸
클라이언트가 요청을 할 수 없는 경로임.

/step03/ root 경로에 요청 >> 웰컴파일리스트에 설정된 경로로 forward 이동됨.
home.do 로 해 두었으면 홈컨트롤러에서 home.jsp 로 forward 이동하게 되있는걸로
설정되어 있으니 또 /views/home.jsp 로 forward 이동.

-----------------------------------------------------------------
src/main/webapp/WEB-INF/web.xml 에서의 설정.
이 프로젝트는 xxx.do 요청을 하면 스프링 프레임워크가 동작하게 설정되어 있음.
Spring dispatcher servlet 에 의해 (servlet mapping 설정)
.do 라는 동작이 들어오면 스프링워크가 동작하도록 설정되있는것.

DispatcherServlet 은 서버 시작 시점에 servlet-context.xml 문서를 로딩해 동작을 준비.
DispatcherServlet 의 동작을 설정하고 싶으면 servlet-context.xml 문서를 수정하면 된다.
servlet-context.xml 문서에는 스프링이 어떤 객체를 생성해서 bean 컨테이너르 관리를 할지에 대한 설정이 들어있다.

(참고)
<servlet> 과 <servlet-mapping> 에서,
servlet 이름(여기서는 appServlet)은 맘대로 설정 가능.
다만 밑에 있는 <servlet> 과 <servlet-mapping>은 동일해야 함 
<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
다만 여기서의 /appServlet/ 은 폴더명이기에 서블릿 이름과는 상관없음. 바꾸면 안됨!

톰캣 어플리케이션은 완성된어플리케이션임. 
이미 완성된 어플리케이션의 동작을 바꾸려면? xml 을 수정한다.(어떤 문서는 json을 수정하기도 함. 앱 만드는 놈 맘임)
 톰캣이 web.xml, server.xml, context.xml 등을 읽어들이면서 동작을 준비한다.
스프링 프레임워크를 사용하게 되면 DispatcherServlet을 사용하게 되어 있다.
이놈의 동작을 준비하는 건 servlet-context.xml

클라이언트가 어떤 요청을 하면 일단 디스패처가 그 요청을 받아냄. (xxx.do로 들어오는)
디스패처는 받아서 어디로 뿌릴 지 판단(어떤 컨트롤러의 어떤 메소드가 처리해야 하나)

디스패처의 설정을 하는 sevlet-context로 가면 beans들이 많음. beans는 객체니까
여긴 객체들의 설정이 들어있는 곳. (스프링 프레임워크가 관리하는)
ex) SqlSessionTemplate 는 MyBatis를 이용해 DB연동을 하는 객체.
단 Servers/context.xml 에 설정된 oracle 접속정보가 있어야 함. 설정필수~(스샷참고)
SqlsessionFactory bean 설정할 때는 
 value="classpath:com/gura/step03/mybatis/Configuration.xml"/> 에서
com/gura/step03/ 를 자기가 실행하는 프로젝트로 바꿔줘야 겠지요?


알겠지? 필요한 객체를 new 하지(우리가 멋대로 만들지) 않음. 스프링에서 다 설정해놓고 필요할때 불러서 쩜 찍고 쓰는거임.

IOC, DI 개념에 대해 알고 있을 것.
Spring bean container에서 주로 관리되는 객체는
Controller, Service, DAO 등이 있음.
주입할 때는 AutoWired를 이용. 근데 DI가 동작하려면 DI를 받는 객체마저도 스프링이 관리하는 객체여야 함. (결국 스프링 안에서 돌고도는 셈이지)
>> 스프링이 관리하는 객체들 사이에서의 의존성 주입(스샷)

 를 붙이고 component scan 을 해서 @Repository이 붙어있는 클래스를
발견하면 그걸 bean 으로 만들어 DI를 할 수 있게 만든다.
이런 설정 또한 servlet-context 에 있다.

com.gura.step03 패키지와 그 하위에 있는 모든 패키지를 scan 해서
스프링 bean 컨테이너에 관리할 객체를 생성해서 관리한다.
스캔 도중 @Controller, @Service, @Repository, @Component 등의
어노테이션이 붙어 있는 클래스가 있다면 해당 클래스로 객체를 생성해서
스프링 bean 컨테이너에서 관리를 한다.
무작정 @ 딱지 붙여놓는다고 bean이 되는 것이 아니고, scan 이 선행되어야 한다.
<context:component-scan base-package="com.gura.step03" />

-------------------------------------------------------------------------
ModelAndView 객체에 대한 이해

-컨트롤러에서 리턴 type으로 지정할 수 있는 객체 중 하나이다.
보통 컨트롤러에서 스트링 타입을 리턴할 때는 뷰페이즤 위치만 리턴하는데,
모델엔뷰는 뷰페이지와 모델 정보를 같이 담을 수 있는 객체
model은 viewpage에 전달할 data 라고 생각하시면 된다.
경우에 따라서는 redirect 이동하 경로도 담을 수 있음.
ModelAndView 객체에 addObject() 메소드를 통해서 담은 데이터는 spring 프레임워크가 동작하면서 자동으로 HttpServletRequest 객체에 담긴다. 
(수동으로 HttpServletRequest 객체의 setAttribute() 메소드를 통해서 담는 것과 마찬가지)

스프링 프레임워크가 
모델엔뷰에 있는 걸 추출해서 알아서 동작을 한다. 는 것을 기억하자.

서비스Service 는 컨트롤러에서 복잡할 작업을 분리해 그것만 따로 처리한다.
컨트롤러는 어떤 요청을 어떤 서비스로 처리할지, 그걸 어느 뷰페이지로 보낼지를 수행한다.
컨트롤러는 폼 전송하는 파라미터를 추출하는 기능도 있다.

---------------------------------------------------------------------------------------------

Contriller 입장에서 Service 객체에 대한 이해
>> Controller에서 사용하는 uitily 로 이해하자.
예를 들어 우리가 신입사원으로 들어갔다고 가정하면, 선배가 service를 다 만들어 놓고 준비해 놓는다. 그럼 우리는 복잡한 로직 처리 없이 Controller만 잘 만들어 붙이면 된다.

서비스 인터페이스를 만들기 쉽지 않아요 >
하나씩 만드세요! 하나씩 만들어 놓고 인터페이스 추가하면 됨

spring framework에서 json 문자열 응답하는 방법을 알고 있어야 하는 이유는?
- ajax 요청에 대한 응답으로 json 문자열을 응답을 많이 한다
(페이지 새로고침 없이 바로바로 응답을 하는 방법)
json 같은 경우는 jsp에서 응답하기가 불편함. 자바친화적이지 않기때문. 직접 만들어서 하려면 굉장히 까다롭기 때문에 보통은 라이브러리를 많이 쓴다. 스프링에서 쓰는 라이브러리가 바로~~~
dependency 에 있는 jackson-databind 이다.

이걸로 처리되는 과정은 JSONTestController 에 잘 나와 있음.
(src/main/java/com/gura/step03/JSONTestController.java)

-------------------------------------------------------------------------------------
AOP aspect orineted programming
관점 (관심) 지향 프로그래밍

스프링의 핵심 개념(IOC, DI, AOP) 중 하나.
프로그래밍을 하다 보면 핵심 비즈니스 로직과 관계없는 것들이 있다. 이것들은 횡단 관심사(crossed concern). 얘네는 따로 작성을 해 두고 설정만으로 원하는 곳에 붙이고 떼고 할 수 있게 설계하는 것.
ex) PlayController에 가 보면 play에는 로그인 기능이 선행되어야 하는데, 이전엔 로그인 인증 작업을 로그인필터에서 했다면 이번엔 AOP 방식으로 구현해놓고 필요할 때만 불러온 것,

<질문>-----------------------------------------------------------------
선생님 질문입니다! 여태 했던 자바 코딩 방식(로그인 필터 등)도 따로 작성하여 필요할 때만 동작하게 만든 것 아닌가요? AOP 방식은 뭔가 다른 것인지요?

필터 => 서블릿 혹은 jsp로 요청이 전달되기 전에 일괄적으로 동작
AOP => 스프링 프레임워크가 동작하는 동안 
	Controller, Service, Dao 의 어떤 메소드던지
	원하는 작업을 설정만으로 할 수가 있다.
--------------------------------------------------------------------------------
PlayController.java 에서 aop는 어떤 메소드 수행 이전이나 직후에 개입을 한다.(여기서는 로그인 여부 > 세션에 로그인정보가 있는지)
세션 객체가 필요하면 HttpServletRequest 객체로 얻어낸다(getSession).
로그인하지 않았으면 그냥 빠꾸(리다이렉트)시킨다. 메소드 실행도 전에.(메소드를 호출조차 하지 않는다. 나는 DispatcherServlet을 통해 메소드 호출 요청을 했는데!)
중간에 검사를 해서 다른 ModelAndView를 리턴하는 것도 가능.

AuthAspect.java 를 보면
@Component
component scan을 통해서 bean 이 될 수 있도록	한다.
@Aspect 
Aspect 역할을 할 수 있도록 어노테이션 추가.

@Around
어떤 모양의 메소드 '주위'에서 동작을 할 지. around는 메소드 동작 언저리(시작 전이나 동작 후)에서 작동을 한다 라고 생각하자.

execution(ModelAndView auth*(...) 라는 aspectj expression 은
리턴 type은 ModelAndView 이고, 메소드의 이름은 auth 로 시작하는 모든 메소드를 가리킨다.
spring이 관리하는 객체중에 위의 모양을 가지고 있는 메소드는 aspect 가 적용이 된다.

auth로 시작하는 모든(*) 메소드에 적용하는 모습 >>
@Around("execution(org.springframework.web.servlet.ModelAndView auth*(..))")
auth*(..)) << 인자는 여러개여도 상관이 없다. 리턴타입은 모델엔뷰를 지켜주고, 반드시 HttpServletRequest가 하나 있어야 한다.
이게 없으면 제대로 동작하지 않음.
---------------------------------------------------------------------------------------------------------------------------

퀀텀DB 오류
com.quantum.util.connection.ConnectionException.couldNotInstantiateDriver! << ?? 테이블 지웠다 다시 깔면 됨
외부 jar 가 추가가 안되있었음. ojdbc 다시 추가하니까 돌아감.

---------------------------------------------------------------------------------------------------------------------------

질문) fileMapper 에서 #{} 와 ${} 의 차이점 (참고사항임 그냥)

FileMapper에서

SELECT num,writer,title,orgFileName,saveFileName,fileSize,regdate
FROM board_file
WHERE num=#{num}  > #{}는 jsp 에서 ? 자리. myBatis 가 알아서 setInt 해 준다.

jsp에서 이런건 안됨. 넣어줄 데이터만 물음표 가능하지 실행할 sql문자체를 물음표 대체할 순 없다.
setString(1, "board_file")

근데 mybatis는 됨 ! ^오^ ${} 안에 넣어서 쓰면 됨. 실행하기 전에 미리 처리하는 전처리 기능이라 보심 된다!
보안때문에 권장되지는 않음... 여기선 참고로 갖다놓은 것. 
WHERE title LIKE '%${title}%' 
title에 들어있는 문자열이 들어온 다음 실행이 된다. 그래서 '' 로 감싸줘야함. 문자열이니까.
---------------------------------------------------------------------------------------------------------------------------

(질문)
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	<!-- 
		bean 의 이름을 이용해서 view 로 이동할수 있도록 설정 
		setOrder(0) 는 0 순위로 찾아 가겠다는 의미 
		0 순위로 찾아서 없으면 
		views 폴더 안에서 jsp 페이지를 찾게 된다. 	
	-->
이거뭐임?

컨트롤러에서 
public String test() {
	retrun "hello";
}
하면
/WEB-INF/views/hello.jsp 로 뱉는 건 기본 법칙.
prefix 		suffix

@Component("hello")
class XXX extends AbstractView{ } 
이러면 응답을 할 수 있는 bean 으로 바뀜.

이경우 bean name에서 먼저 찾으라는 뜻임.
자바 코드로 환산하면
enw BeanNameViewResolver().setOrder(0);


